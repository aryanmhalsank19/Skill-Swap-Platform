# Generated by Django 5.0.2 on 2025-07-12 07:05

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='SystemMessage',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=255)),
                ('content', models.TextField()),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('is_active', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email', models.CharField(max_length=255, unique=True)),
                ('password', models.CharField(max_length=255)),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('location', models.CharField(blank=True, max_length=255, null=True)),
                ('profile_photo_url', models.URLField(blank=True, max_length=255, null=True)),
                ('is_public', models.BooleanField(default=True)),
                ('availability', models.JSONField(blank=True, default=list, null=True)),
                ('timeslot', models.JSONField(blank=True, default=list, null=True)),
                ('linkedin', models.URLField(blank=True, max_length=255, null=True, validators=[django.core.validators.URLValidator()])),
                ('instagram', models.URLField(blank=True, max_length=255, null=True, validators=[django.core.validators.URLValidator()])),
                ('youtube', models.URLField(blank=True, max_length=255, null=True, validators=[django.core.validators.URLValidator()])),
                ('facebook', models.URLField(blank=True, max_length=255, null=True, validators=[django.core.validators.URLValidator()])),
                ('x', models.URLField(blank=True, max_length=255, null=True, validators=[django.core.validators.URLValidator()], verbose_name='X (Twitter)')),
                ('github', models.URLField(blank=True, max_length=255, null=True, validators=[django.core.validators.URLValidator()])),
                ('personal_portfolio', models.URLField(blank=True, max_length=255, null=True, validators=[django.core.validators.URLValidator()])),
                ('is_active', models.BooleanField(default=True)),
                ('is_banned', models.BooleanField(default=False)),
                ('banned_reason', models.TextField(blank=True, null=True)),
                ('credits', models.IntegerField(default=0)),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now)),
                ('last_login', models.DateTimeField(blank=True, null=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_admin', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Session',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('access_token', models.TextField()),
                ('refresh_token', models.TextField()),
                ('expires_at', models.DateTimeField()),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sessions', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Skill',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('type', models.CharField(choices=[('Offered', 'Offered'), ('Wanted', 'Wanted')], max_length=10)),
                ('description', models.TextField(blank=True, null=True)),
                ('is_verified', models.BooleanField(default=False)),
                ('verification_count', models.IntegerField(default=0)),
                ('proof_file_url', models.URLField(blank=True, max_length=255, null=True)),
                ('proof_file_type', models.CharField(blank=True, choices=[('Link', 'Link'), ('Image', 'Image')], max_length=10, null=True)),
                ('proof_description', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='skills', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SwapRequest',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('message', models.TextField(blank=True, null=True)),
                ('status', models.CharField(choices=[('Pending', 'Pending'), ('Accepted', 'Accepted'), ('Rejected', 'Rejected'), ('Completed', 'Completed'), ('Cancelled', 'Cancelled'), ('Withdrawn', 'Withdrawn')], default='Pending', max_length=10)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('offered_skill', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='offered_in_swaps', to='api.skill')),
                ('receiver', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='received_swap_requests', to=settings.AUTH_USER_MODEL)),
                ('requested_skill', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='requested_in_swaps', to='api.skill')),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_swap_requests', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Feedback',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('rating', models.IntegerField()),
                ('comment', models.TextField(blank=True, null=True)),
                ('expectations_matched', models.BooleanField(default=False)),
                ('skill_verified_by_peer', models.BooleanField(blank=True, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('rated_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='received_feedback', to=settings.AUTH_USER_MODEL)),
                ('rater', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='given_feedback', to=settings.AUTH_USER_MODEL)),
                ('swap_request', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='feedback', to='api.swaprequest')),
            ],
        ),
    ]
